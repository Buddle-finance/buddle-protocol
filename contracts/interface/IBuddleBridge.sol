// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

interface IBuddleBridge {

    /**
     * Initialize the contract with state variables
     * @param _messenger The address of the L1 Cross Domain Messenger Contract
     * @param _tokenBridge The address of the L2 Standard Token Bridge
     * @param _addressManager The address of the Address Manager
     */
    function initialize(
        address _messenger, 
        address _tokenBridge, 
        address _addressManager
    ) external;

    /**
     * Set the source and destination side contracts for the respective L2 chain
     * @param _src The address of the deployed Source Side contract
     * @param _dest The address of the deployed Destination Side contract
     */
    function setContracts(
        address _src,
        address _dest
    ) external;

    /**
     * Add a token mapping to the contract
     */
    function addTokenAddress(
        address _l2TokenAddress,
        address _l1TokenAddress 
    ) external;

    /**
     *
     */
    function addBridge(
        uint _chain,
        address _contract
    ) external;

    /**
     *
     */
    function updateBridge(
        uint _chain,
        address _contract
    ) external;
    
    /**
     * Claim the bounty for the current pool. A ticket must be emitted prior to this function.
     * @param _ticket The ticket generated by the source L2 contract
     * @param _chain The chain ID for the destination contract
     * @param _tokens List of tokens (L2 addresses) supported by Buddle Source
     * @param _amounts List of amounts corresponding to _tokens
     * @param _firstIdForTicket The first transfer id included in _ticket
     * @param _lastIdForTicket The last transfer id included in _ticket
     * @param stateRoot State root emitted with the corresponding _ticket
     */
    function claimBounty(
        bytes32 _ticket,
        uint _chain,
        address[] memory _tokens,
        uint256[] memory _amounts,
        uint256 _firstIdForTicket,
        uint256 _lastIdForTicket,
        bytes32 stateRoot
    ) external payable;

    /**
     *
     *
     */
    function transferFunds(
        address[] memory _tokens,
        uint256[] memory _amounts
    ) external payable;

    /**
     *
     *
     */
    function approveRoot(
        bytes32 _root
    ) external;
}